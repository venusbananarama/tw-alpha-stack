#requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'

function Get-PoolIDs {
  # 候選（由高到低）：investable_universe → configs\universe.tw_all(.txt) → universe\*.txt
  $candidates = @(
    '.\configs\investable_universe.txt',
    '.\configs\universe.tw_all.txt',
    '.\configs\universe.tw_all',
    '.\universe\universe.tw_all.txt',
    '.\universe\tw_all.txt',
    '.\universe\all.txt'
  )
  $p = $candidates | Where-Object { Test-Path #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'

function Get-PoolIDs {
  $candidates = @(
    '.\configs\investable_universe.txt',
    '.\universe\universe.tw_all.txt',
    '.\universe\tw_all.txt',
    '.\universe\all.txt'
  )
  $p = $candidates | Where-Object { Test-Path #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 } | Select-Object -First 1
  if(-not $p){ throw "找不到池表（configs\investable_universe.txt / universe\universe.tw_all.txt / tw_all.txt / all.txt）" }
  return Get-Content $p | ForEach-Object { #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

.Trim().Replace('.TW','') } | Where-Object { #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 -match '^\d{4}$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 } | Sort-Object -Unique
}

function Convert-TokenToLike4([string]$token){
  $t = ($token -replace '\.TW$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

,'').Trim()
  if ($t -match '^(ALL|TSE)$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

) { return '????' }
  $like = ''
  foreach($ch in $t.ToCharArray()){
    if ($like.Length -ge 4) { break }
    switch -Regex ($ch) {
      '^\d$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

     { $like += $ch; break }
      '^[Xx\?]$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 { $like += '?'; break }
      '^\*$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

     { while($like.Length -lt 4){ $like += '?' }; break }
      default    { break }
    }
  }
  while($like.Length -lt 4){ $like += '?' }
  return $like
}

function Expand-IDPatterns([string[]]$IDs){
  $pool = Get-PoolIDs
  $set  = New-Object System.Collections.Generic.HashSet[string]
  foreach($tok in @($IDs)){
    foreach($raw in ( ($tok -is [string] -and $tok -match ',') ? $tok.Split(',') : @($tok) )){
      $t = ($raw -replace '\.TW$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

,'').Trim()
      if (-not $t) { continue }
      if ($t -match '^(ALL|TSE)$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

){ foreach($id in $pool){ [void]$set.Add($id) }; continue }
      if ($t -match '^[0-9]{4}$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

){ [void]$set.Add($t); continue }
      $like = Convert-TokenToLike4 $t
      foreach($id in $pool){ if ($id -like $like) { [void]$set.Add($id) } }
    }
  }
  return @($set | Sort-Object)
}
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."


 } | Select-Object -First 1
  if(-not $p){ throw "找不到池表（configs/universe 皆無），請先建立或放置池檔。" }
  return Get-Content -LiteralPath $p | ForEach-Object { #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'

function Get-PoolIDs {
  $candidates = @(
    '.\configs\investable_universe.txt',
    '.\universe\universe.tw_all.txt',
    '.\universe\tw_all.txt',
    '.\universe\all.txt'
  )
  $p = $candidates | Where-Object { Test-Path #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 } | Select-Object -First 1
  if(-not $p){ throw "找不到池表（configs\investable_universe.txt / universe\universe.tw_all.txt / tw_all.txt / all.txt）" }
  return Get-Content $p | ForEach-Object { #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

.Trim().Replace('.TW','') } | Where-Object { #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 -match '^\d{4}$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 } | Sort-Object -Unique
}

function Convert-TokenToLike4([string]$token){
  $t = ($token -replace '\.TW$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

,'').Trim()
  if ($t -match '^(ALL|TSE)$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

) { return '????' }
  $like = ''
  foreach($ch in $t.ToCharArray()){
    if ($like.Length -ge 4) { break }
    switch -Regex ($ch) {
      '^\d$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

     { $like += $ch; break }
      '^[Xx\?]$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 { $like += '?'; break }
      '^\*$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

     { while($like.Length -lt 4){ $like += '?' }; break }
      default    { break }
    }
  }
  while($like.Length -lt 4){ $like += '?' }
  return $like
}

function Expand-IDPatterns([string[]]$IDs){
  $pool = Get-PoolIDs
  $set  = New-Object System.Collections.Generic.HashSet[string]
  foreach($tok in @($IDs)){
    foreach($raw in ( ($tok -is [string] -and $tok -match ',') ? $tok.Split(',') : @($tok) )){
      $t = ($raw -replace '\.TW$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

,'').Trim()
      if (-not $t) { continue }
      if ($t -match '^(ALL|TSE)$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

){ foreach($id in $pool){ [void]$set.Add($id) }; continue }
      if ($t -match '^[0-9]{4}$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

){ [void]$set.Add($t); continue }
      $like = Convert-TokenToLike4 $t
      foreach($id in $pool){ if ($id -like $like) { [void]$set.Add($id) } }
    }
  }
  return @($set | Sort-Object)
}
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."


.Trim().Replace('.TW','') } |
         Where-Object { #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'

function Get-PoolIDs {
  $candidates = @(
    '.\configs\investable_universe.txt',
    '.\universe\universe.tw_all.txt',
    '.\universe\tw_all.txt',
    '.\universe\all.txt'
  )
  $p = $candidates | Where-Object { Test-Path #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 } | Select-Object -First 1
  if(-not $p){ throw "找不到池表（configs\investable_universe.txt / universe\universe.tw_all.txt / tw_all.txt / all.txt）" }
  return Get-Content $p | ForEach-Object { #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

.Trim().Replace('.TW','') } | Where-Object { #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 -match '^\d{4}$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 } | Sort-Object -Unique
}

function Convert-TokenToLike4([string]$token){
  $t = ($token -replace '\.TW$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

,'').Trim()
  if ($t -match '^(ALL|TSE)$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

) { return '????' }
  $like = ''
  foreach($ch in $t.ToCharArray()){
    if ($like.Length -ge 4) { break }
    switch -Regex ($ch) {
      '^\d$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

     { $like += $ch; break }
      '^[Xx\?]$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 { $like += '?'; break }
      '^\*$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

     { while($like.Length -lt 4){ $like += '?' }; break }
      default    { break }
    }
  }
  while($like.Length -lt 4){ $like += '?' }
  return $like
}

function Expand-IDPatterns([string[]]$IDs){
  $pool = Get-PoolIDs
  $set  = New-Object System.Collections.Generic.HashSet[string]
  foreach($tok in @($IDs)){
    foreach($raw in ( ($tok -is [string] -and $tok -match ',') ? $tok.Split(',') : @($tok) )){
      $t = ($raw -replace '\.TW$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

,'').Trim()
      if (-not $t) { continue }
      if ($t -match '^(ALL|TSE)$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

){ foreach($id in $pool){ [void]$set.Add($id) }; continue }
      if ($t -match '^[0-9]{4}$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

){ [void]$set.Add($t); continue }
      $like = Convert-TokenToLike4 $t
      foreach($id in $pool){ if ($id -like $like) { [void]$set.Add($id) } }
    }
  }
  return @($set | Sort-Object)
}
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."


 -match '^\d{4}
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 } | Select-Object -First 1
  if(-not $p){ throw "找不到池表（configs\investable_universe.txt / universe\universe.tw_all.txt / tw_all.txt / all.txt）" }
  return Get-Content $p | ForEach-Object { #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

.Trim().Replace('.TW','') } | Where-Object { #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 -match '^\d{4}$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 } | Sort-Object -Unique
}

function Convert-TokenToLike4([string]$token){
  $t = ($token -replace '\.TW$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

,'').Trim()
  if ($t -match '^(ALL|TSE)$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

) { return '????' }
  $like = ''
  foreach($ch in $t.ToCharArray()){
    if ($like.Length -ge 4) { break }
    switch -Regex ($ch) {
      '^\d$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

     { $like += $ch; break }
      '^[Xx\?]$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 { $like += '?'; break }
      '^\*$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

     { while($like.Length -lt 4){ $like += '?' }; break }
      default    { break }
    }
  }
  while($like.Length -lt 4){ $like += '?' }
  return $like
}

function Expand-IDPatterns([string[]]$IDs){
  $pool = Get-PoolIDs
  $set  = New-Object System.Collections.Generic.HashSet[string]
  foreach($tok in @($IDs)){
    foreach($raw in ( ($tok -is [string] -and $tok -match ',') ? $tok.Split(',') : @($tok) )){
      $t = ($raw -replace '\.TW$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

,'').Trim()
      if (-not $t) { continue }
      if ($t -match '^(ALL|TSE)$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

){ foreach($id in $pool){ [void]$set.Add($id) }; continue }
      if ($t -match '^[0-9]{4}$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

){ [void]$set.Add($t); continue }
      $like = Convert-TokenToLike4 $t
      foreach($id in $pool){ if ($id -like $like) { [void]$set.Add($id) } }
    }
  }
  return @($set | Sort-Object)
}
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."


 } | Sort-Object -Unique
}
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 } | Select-Object -First 1
  if(-not $p){ throw "找不到池表（configs\investable_universe.txt / universe\universe.tw_all.txt / tw_all.txt / all.txt）" }
  return Get-Content $p | ForEach-Object { #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

.Trim().Replace('.TW','') } | Where-Object { #requires -Version 7
<#
  Run-DateID-Extras.ps1
  今天｜單日×多股 Date-ID 特攻（必收 8 表為預設），落地 extra/<Dataset>；不動四表主線。
#>
[CmdletBinding(PositionalBinding=$false)]
param(
  [Parameter(Mandatory)][datetime]$Date,
  [Parameter(Mandatory)][string[]]$IDs,
  [string]$Datasets = 'TaiwanStockShareholding,TaiwanStockKBar,TaiwanStockMarketValue,TaiwanStockMarketValueWeight,TaiwanStockSplitPrice,TaiwanStockParValueChange,TaiwanStockCapitalReductionReferencePrice,TaiwanStockDelisting',
  [ValidateRange(6,120)][int]$RPM = 10,
  [int]$Batch = 300,
  [string]$DataRoot = 'datahub',
  [datetime]$End
)

Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 -match '^\d{4}$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 } | Sort-Object -Unique
}

function Convert-TokenToLike4([string]$token){
  $t = ($token -replace '\.TW$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

,'').Trim()
  if ($t -match '^(ALL|TSE)$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

) { return '????' }
  $like = ''
  foreach($ch in $t.ToCharArray()){
    if ($like.Length -ge 4) { break }
    switch -Regex ($ch) {
      '^\d$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

     { $like += $ch; break }
      '^[Xx\?]$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

 { $like += '?'; break }
      '^\*$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

     { while($like.Length -lt 4){ $like += '?' }; break }
      default    { break }
    }
  }
  while($like.Length -lt 4){ $like += '?' }
  return $like
}

function Expand-IDPatterns([string[]]$IDs){
  $pool = Get-PoolIDs
  $set  = New-Object System.Collections.Generic.HashSet[string]
  foreach($tok in @($IDs)){
    foreach($raw in ( ($tok -is [string] -and $tok -match ',') ? $tok.Split(',') : @($tok) )){
      $t = ($raw -replace '\.TW$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

,'').Trim()
      if (-not $t) { continue }
      if ($t -match '^(ALL|TSE)$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

){ foreach($id in $pool){ [void]$set.Add($id) }; continue }
      if ($t -match '^[0-9]{4}$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."

){ [void]$set.Add($t); continue }
      $like = Convert-TokenToLike4 $t
      foreach($id in $pool){ if ($id -like $like) { [void]$set.Add($id) } }
    }
  }
  return @($set | Sort-Object)
}
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 $PY，請先建立 venv 並安裝需求套件。" }
if ([string]::IsNullOrWhiteSpace($env:FINMIND_TOKEN)) { throw "FINMIND_TOKEN 未設定" }
if (-not $env:FINMIND_KBAR_INTERVAL) { $env:FINMIND_KBAR_INTERVAL='5' }

$env:FINMIND_THROTTLE_RPM = [string]$RPM

# 規範 IDs：支援樣板（23XX/23*），以投資池展開 → 再補 .TW
$expandedIDs = Expand-IDPatterns @($IDs)
if(-not $expandedIDs){ throw "IDs 展開後為空（請檢查樣板或投資池）" }
Write-Host ("[IDs] expanded={0} sample={1}" -f $expandedIDs.Count, (($expandedIDs | Select-Object -First 10) -join ','))

$symbols = foreach($id in $expandedIDs){ "$id.TW" } else {$x} }
)

$ds     = $Date.ToString('yyyy-MM-dd')
$endEx  = if ($PSBoundParameters.ContainsKey('End')) { ([datetime]$End).ToString('yyyy-MM-dd') } else { ($Date.AddDays(1)).ToString('yyyy-MM-dd') }
$sets   = @( ($Datasets -split ',') | ForEach-Object { $_.Trim() } | Where-Object { $_ } )

Write-Host "[DateID-Extras] date=$ds end_exclusive=$endEx ids=$($symbols.Count) rpm=$RPM datasets=$($sets -join ',')"

for($i=0; $i -lt $symbols.Count; $i+=$Batch){
  $j = [Math]::Min($i+$Batch-1, $symbols.Count-1)
  $chunk = $symbols[$i..$j]
  $idsArg = ($chunk -join ',')
  foreach($d in $sets){
    & $PY .\scripts\fm_dateid_fetch.py `
      --datasets $d --ids $idsArg `
      --date $ds --end $endEx `
      --out-root $DataRoot
  }
  Start-Sleep -Milliseconds 500
}
Write-Host "Done (extras)."



