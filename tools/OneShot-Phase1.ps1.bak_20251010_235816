param(
  [string]$DataRoot='datahub',
  [double]$Qps=1.66,
  [int]$HourlyCap=6000,
  [string]$Start=$null,
  [string]$End=$null
)
$ErrorActionPreference='Stop'
$env:ALPHACITY_ALLOW='1'
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue

# Resolve Python
$Py = ".\.venv\Scripts\python.exe"
if (-not (Test-Path $Py)) {
  if (Get-Command py -ErrorAction SilentlyContinue) { $Py = 'py'; $PY_ARGS=@('-3.11') }
  elseif (Get-Command python -ErrorAction SilentlyContinue) { $Py = (Get-Command python).Path; $PY_ARGS=@() }
  else { throw "Python not found" }
} else { $PY_ARGS=@() }

# Dates: default = [today-2, today+1)
$today = (Get-Date).Date
if (-not $Start) { $Start = $today.AddDays(-2).ToString('yyyy-MM-dd') }
if (-not $End)   { $End   = $today.AddDays(1).ToString('yyyy-MM-dd') }

# Guard DataRoot + 扁平雙層
$ROOT = (Get-Location).Path
$dr = (Resolve-Path $DataRoot).Path
if ($dr -match 'silver\\alpha$') { throw "DataRoot錯：請傳 'datahub'，非 'datahub\\silver\\alpha'" }
$BAD  = Join-Path $ROOT 'datahub\silver\alpha\silver\alpha'
$GOOD = Join-Path $ROOT 'datahub\silver\alpha'
if (Test-Path $BAD) {
  Get-ChildItem $BAD -Directory | ForEach-Object {
    $ds=$_.Name; $dstDs=Join-Path $GOOD $ds
    New-Item -ItemType Directory -Force -Path $dstDs | Out-Null
    Get-ChildItem $_ -Directory | ForEach-Object {
      $dstPart=Join-Path $dstDs $_.Name
      New-Item -ItemType Directory -Force -Path $dstPart | Out-Null
      Get-ChildItem $_ -File | Move-Item -Destination $dstPart -Force
    }
  }
  Remove-Item $BAD -Recurse -Force
  Write-Host "[FIX] flattened duplicate silver\alpha"
}

# Backfill minimal：chip 全市場 + dividend 1101 + PER 2330
& $Py @PY_ARGS 'scripts/finmind_backfill.py' --start $Start --end $End `
  --datasets 'TaiwanStockInstitutionalInvestorsBuySell' --universe 'TSE' `
  --workers 1 --qps ("{0:0.00}" -f $Qps) --hourly-cap $HourlyCap --datahub-root $dr
& $Py @PY_ARGS 'scripts/finmind_backfill.py' --start $Start --end $End `
  --datasets 'TaiwanStockInstitutionalInvestorsBuySell' --universe 'OTC' `
  --workers 1 --qps ("{0:0.00}" -f $Qps) --hourly-cap $HourlyCap --datahub-root $dr
& $Py @PY_ARGS 'scripts/finmind_backfill.py' --start '2018-01-01' --end $End `
  --datasets 'TaiwanStockDividend' --symbols 1101 `
  --workers 1 --qps ("{0:0.00}" -f $Qps) --hourly-cap $HourlyCap --datahub-root $dr
& $Py @PY_ARGS 'scripts/finmind_backfill.py' --start '2022-09-28' --end $End `
  --datasets 'TaiwanStockPER' --symbols 2330 `
  --workers 1 --qps ("{0:0.00}" -f $Qps) --hourly-cap $HourlyCap --datahub-root $dr

# 驗證 partitions + max_date
$code=@'
from pathlib import Path; import pyarrow.parquet as pq, pandas as pd
for d in ["chip","dividend","per"]:
  p=Path(f"datahub/silver/alpha/{d}")
  parts=sorted([x.name for x in p.glob("yyyymm=*")])
  print("[PARTS]", d, parts[-3:])
  ds=[]
  for f in p.glob("yyyymm=*/*.parquet"):
    ds.append(pd.to_datetime(pq.read_table(f, columns=["date"]).to_pandas()["date"]).max())
  print("[MAX]", d, (max(ds).date() if ds else None))
'@; $code | & $Py @PY_ARGS -

# 建池 + Preflight
& $Py @PY_ARGS 'scripts/build_universe.py' --rules '.\rules.yaml' --out '.\configs\investable_universe.txt'
& $Py @PY_ARGS 'scripts/preflight_check.py' --rules '.\rules.yaml' --export 'reports'
Get-Content .\reports\preflight_report.json -TotalCount 120
