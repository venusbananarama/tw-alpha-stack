[CmdletBinding()]
param(
  [string]$RootPath = "C:\AI\tw-alpha-stack",
  [string]$Start="", [string]$End="",
  [int]$Batch=400, [int]$MaxRetries=6, [int]$Workers=4,  # 注意：不再傳給 Python；保留以後用於平行批次
  [switch]$FillGaps, [switch]$Force
)
Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$showVerbose = $PSBoundParameters.ContainsKey('Verbose')

Set-Location $RootPath
if (-not $env:ALPHACITY_ALLOW -or $env:ALPHACITY_ALLOW -ne '1') { throw "ALPHACITY_ALLOW != 1" }

$PY = '.\.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "Python not found: $PY" }

$ts = Get-Date -Format 'yyyyMMdd_HHmmss'
$repo = Join-Path $RootPath 'reports'; New-Item -ItemType Directory -Force -Path $repo | Out-Null
$log  = Join-Path $repo ("backfill_worker_{0}.log" -f $ts)
function Log([string]$m){
  $line = "[{0}] {1}" -f (Get-Date).ToString('s'), $m
  $line | Tee-Object -FilePath $log -Append | Out-Null
  if ($showVerbose){ Write-Host $line }
}

# 前置檢查與期望日期
& $PY .\scripts\preflight_check.py --rules .\rules.yaml --export .\reports --root . *>$null
$pf=$null; try { $pf = Get-Content .\reports\preflight_report.json -Raw | ConvertFrom-Json } catch {}
$expect=$null; if ($pf){ if ($pf.meta -and $pf.meta.expect_date){ $expect=$pf.meta.expect_date } elseif ($pf.expect_date){ $expect=$pf.expect_date } }

function Get-DefaultWindow($m,$e){
  if (-not $m -or -not $e){ return $null }
  @{ start=([datetime]::Parse($m).AddDays(1).ToString('yyyy-MM-dd'));
     end  =([datetime]::Parse($e).ToString('yyyy-MM-dd')) }
}

# 投資池（用於 chip/per 分批）
$POOL=@()
$universe=Join-Path $RootPath 'configs\investable_universe.txt'
if (Test-Path $universe){
  $POOL = Get-Content $universe | ? { $_ -and -not $_.StartsWith('#') } | % { ($_ -replace '\.TW$','').Trim() }
  Log ("Universe loaded: {0} symbols" -f $POOL.Count)
} else {
  Log "Universe file not found: configs\investable_universe.txt"
}

# 單批執行（嚴格檢查退出碼；--symbols 用空白多值）
function Invoke-BackfillOne([string]$dataset,[string]$st,[string]$ed,[string[]]$syms,[int]$retry){
  $try=0
  while($try -lt $retry){
    $try++
    $args = @('.\scripts\finmind_backfill.py','--datasets',$dataset,'--start',$st,'--end',$ed,'--datahub-root','datahub')
    if ($syms -and $syms.Count -gt 0){ $args += @('--symbols') + $syms }
    if ($Force){ $args += '--force' }

    Log ("Run {0} try#{1}: {2}" -f $dataset,$try, ($args -join ' '))
    $out = & $PY @args 2>&1
    $out | Tee-Object -FilePath $log -Append | Out-Null
    $code = $LASTEXITCODE

    if ($code -eq 0) { return $true }

    $buf = ($out -join "`n")
    if ($buf -match '402') {
      $now = Get-Date
      $wait = [math]::Min([int][math]::Ceiling(([datetime]::Today.AddHours((Get-Date).Hour+1) - $now).TotalSeconds),3600)
      Log ("HTTP 402: wait {0}s until next hour" -f $wait); Start-Sleep -Seconds $wait
    } else {
      $bo=(10,20,40,80,120)[[math]::Min($try-1,4)]
      Log ("ExitCode={0}; backoff {1}s" -f $code,$bo); Start-Sleep -Seconds $bo
    }
  }
  return $false
}

# 計算回補日期窗
$win_prices=$null;$win_chip=$null;$win_dividend=$null;$win_per=$null
if ($Start -and $End){
  $win_prices=@{start=$Start;end=$End};$win_chip=$win_prices;$win_dividend=$win_prices;$win_per=$win_prices
} elseif ($pf -and $expect){
  $win_prices   = Get-DefaultWindow $pf.freshness.prices.max_date    $expect
  $win_chip     = Get-DefaultWindow $pf.freshness.chip.max_date      $expect
  $win_dividend = Get-DefaultWindow $pf.freshness.dividend.max_date  $expect
  $win_per      = Get-DefaultWindow $pf.freshness.per.max_date       $expect
} else {
  throw "無法決定回補日窗：請傳 -Start/-End 或先產生 preflight_report.json"
}

$summary=[ordered]@{}
function Run-One($name,$win,[string[]]$pool){
  if (-not $win){ Log ("SKIP {0}: window=null" -f $name); $summary[$name]=@{status='skip';reason='window=null'}; return }
  $st=$win.start;$ed=$win.end
  $usePool = ($name -in @('chip','per')) -and ($pool.Count -gt 0)
  if ($usePool){
    $batch=[math]::Max(1,$Batch)
    $okAll=$true; $failRange=$null; $batches=[int][math]::Ceiling($pool.Count/[double]$batch)
    for($i=0;$i -lt $pool.Count;$i+=$batch){
      $j=[math]::Min($i+$batch-1,$pool.Count-1)
      $chunk=$pool[$i..$j]
      $ok = Invoke-BackfillOne $name $st $ed $chunk $MaxRetries
      if (-not $ok){ $okAll=$false; $failRange="$i..$j"; break }
    }
    if ($okAll){ $summary[$name]=@{status='ok';batches=$batches} }
    else       { $summary[$name]=@{status='fail';batch=$failRange} }
  } else {
    $ok = Invoke-BackfillOne $name $st $ed @() $MaxRetries
    $summary[$name]=@{status=($ok?'ok':'fail')}
  }
}

Run-One 'prices'   $win_prices   $POOL
Run-One 'chip'     $win_chip     $POOL
Run-One 'per'      $win_per      $POOL
Run-One 'dividend' $win_dividend $POOL

$sumFile = Join-Path $repo ("backfill_summary_{0}.json" -f $ts)
($summary | ConvertTo-Json -Depth 10) | Set-Content -LiteralPath $sumFile -Encoding utf8
