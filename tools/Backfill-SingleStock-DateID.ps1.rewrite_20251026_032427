#requires -Version 7
[CmdletBinding(PositionalBinding=$false, DefaultParameterSetName='ByDateId')]
param(
  [Parameter(Mandatory)][Alias('Symbol','Symbols')][string[]]$Ticker,
  [Parameter(Mandatory, ParameterSetName='ByDateId')][int]$StartId,
  [Parameter(Mandatory, ParameterSetName='ByDateId')][int]$EndId,
  [Parameter(Mandatory, ParameterSetName='ByDate')][datetime]$StartDate,
  [Parameter(Mandatory, ParameterSetName='ByDate')][datetime]$EndDate,
  [switch]$DoPrices = $true, [switch]$DoChip = $true,
  [ValidateRange(0.10,100.0)][double]$Qps = 1.5,
  [ValidateRange(100,20000)][int]$HourlyCap = 6000,  # 目前僅保留參數，不往下傳
  [string]$DataRoot = 'datahub'
)
Set-StrictMode -Version Latest; $ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if(-not $env:ALPHACITY_ALLOW){ $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -EA SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if(-not (Test-Path $PY)){ throw "找不到 $PY（請先建立 venv 並安裝套件）" }

# 讀交易日曆
$calPath = Join-Path $root 'cal\trading_days.csv'
if(-not (Test-Path $calPath)){ throw "缺少 $calPath" }
$tradingDays = Import-Csv -LiteralPath $calPath | ForEach-Object { [datetime]::ParseExact($_.date,'yyyy-MM-dd',$null) } | Sort-Object
if(-not $tradingDays -or $tradingDays.Count -lt 10){ throw "交易日曆內容異常" }

# [AC_LIVE_TRADING_CLAMP] 僅取 <= 今天(台北) 的最近交易日，避免 DateID 指到未來
try { $todayTpe = [TimeZoneInfo]::ConvertTimeBySystemTimeZoneId([DateTime]::UtcNow, 'Taipei Standard Time').Date }
catch { $todayTpe = (Get-Date).AddHours(8).Date }  # 後援：UTC+8
$tradingDays = @($tradingDays | Where-Object { #requires -Version 7
[CmdletBinding(PositionalBinding=$false, DefaultParameterSetName='ByDateId')]
param(
  [Parameter(Mandatory)][Alias('Symbol','Symbols')][string[]]$Ticker,
  [Parameter(Mandatory, ParameterSetName='ByDateId')][int]$StartId,
  [Parameter(Mandatory, ParameterSetName='ByDateId')][int]$EndId,
  [Parameter(Mandatory, ParameterSetName='ByDate')][datetime]$StartDate,
  [Parameter(Mandatory, ParameterSetName='ByDate')][datetime]$EndDate,
  [switch]$DoPrices = $true, [switch]$DoChip = $true,
  [ValidateRange(0.10,100.0)][double]$Qps = 1.5,
  [ValidateRange(100,20000)][int]$HourlyCap = 6000,  # 目前僅保留參數，不往下傳
  [string]$DataRoot = 'datahub'
)
Set-StrictMode -Version Latest; $ErrorActionPreference='Stop'
$root = (Resolve-Path -LiteralPath (Join-Path $PSScriptRoot '..')).Path
Set-Location $root
if(-not $env:ALPHACITY_ALLOW){ $env:ALPHACITY_ALLOW='1' }
Remove-Item Env:PYTHONSTARTUP -EA SilentlyContinue | Out-Null
$PY = '.\.venv\Scripts\python.exe'
if(-not (Test-Path $PY)){ throw "找不到 $PY（請先建立 venv 並安裝套件）" }

# 讀交易日曆
$calPath = Join-Path $root 'cal\trading_days.csv'
if(-not (Test-Path $calPath)){ throw "缺少 $calPath" }
$tradingDays = Import-Csv -LiteralPath $calPath | ForEach-Object { [datetime]::ParseExact($_.date,'yyyy-MM-dd',$null) } | Sort-Object
if(-not $tradingDays -or $tradingDays.Count -lt 10){ throw "交易日曆內容異常" }

function Get-DateFromId([int]$id){
  if ($id -lt 1 -or $id -gt $tradingDays.Count) {
    throw "DateID 超界：$id（有效範圍 1..$($tradingDays.Count)）"
  }
  return $tradingDays[$id - 1]
}; $tradingDays[$id-1] }
function Normalize-DateToTrading([datetime]$dt){
  $dt = $dt.Date; $idx = [Array]::BinarySearch([datetime[]]$tradingDays,$dt)
  if($idx -ge 0){ return $tradingDays[$idx] }
  $ins = -bnot $idx; if($ins -le 0){ throw "日期早於最早交易日：$dt" }
  return $tradingDays[$ins-1]
}

switch($PSCmdlet.ParameterSetName){
  'ByDateId'{ $sDate=Get-DateFromId $StartId; $eDate=Get-DateFromId $EndId }
  'ByDate'  { $sDate=Normalize-DateToTrading $StartDate; $eDate=Normalize-DateToTrading $EndDate }
}
if($eDate -lt $sDate){ throw "時間區間錯誤：End < Start" }

# SSOT：--end 不含終點 → 內部 +1 天讓使用者的 EndDate/EndId 含當天
$startStr = $sDate.ToString('yyyy-MM-dd')
$endStrEx = ($eDate.AddDays(1)).ToString('yyyy-MM-dd')

# symbols
$symbols = foreach($t in $Ticker){ $x=$t.Trim(); if($x -notmatch '\.'){"$x.TW"} else {$x} }
$symbolsArg = ($symbols -join ',')

$datasets = @(); if($DoPrices){$datasets+='TaiwanStockPrice'}; if($DoChip){$datasets+='TaiwanStockInstitutionalInvestorsBuySell'}
if(-not $datasets){ throw "未選任何資料集（-DoPrices / -DoChip）" }

# 將 QPS 寫入環境（僅本次、之後還原），Python 內用 FINMIND_QPS 讀取
$prevQps = $env:FINMIND_QPS
$env:FINMIND_QPS = ('{0}' -f $Qps)

Write-Host "[Backfill] symbols=$symbolsArg, window=$startStr → $endStrEx (end exclusive)"
try{
  foreach($ds in $datasets){
    Write-Host "  - dataset=$ds, qps=$($env:FINMIND_QPS)"
    & $PY .\scripts\finmind_backfill.py `
      --datasets $ds --symbols $symbolsArg `
      --start $startStr --end $endStrEx `
      --datahub-root $DataRoot
  }
} finally {
  if($null -ne $prevQps){ $env:FINMIND_QPS = $prevQps } else { Remove-Item Env:FINMIND_QPS -EA SilentlyContinue }
}
Write-Host "Done."
 -le $todayTpe })
if (-not $tradingDays) { throw '交易日曆不含 <= 今天 的日期；請檢查 cal\trading_days.csv' }

function Get-DateFromId([int]$id){
  if ($id -lt 1 -or $id -gt $tradingDays.Count) {
    throw "DateID 超界：$id（有效範圍 1..$($tradingDays.Count)）"
  }
  return $tradingDays[$id - 1]
}; $tradingDays[$id-1] }
function Normalize-DateToTrading([datetime]$dt){
  $dt = $dt.Date; $idx = [Array]::BinarySearch([datetime[]]$tradingDays,$dt)
  if($idx -ge 0){ return $tradingDays[$idx] }
  $ins = -bnot $idx; if($ins -le 0){ throw "日期早於最早交易日：$dt" }
  return $tradingDays[$ins-1]
}

switch($PSCmdlet.ParameterSetName){
  'ByDateId'{ $sDate=Get-DateFromId $StartId; $eDate=Get-DateFromId $EndId }
  'ByDate'  { $sDate=Normalize-DateToTrading $StartDate; $eDate=Normalize-DateToTrading $EndDate }
}
if($eDate -lt $sDate){ throw "時間區間錯誤：End < Start" }

# SSOT：--end 不含終點 → 內部 +1 天讓使用者的 EndDate/EndId 含當天
$startStr = $sDate.ToString('yyyy-MM-dd')
$endStrEx = ($eDate.AddDays(1)).ToString('yyyy-MM-dd')

# symbols
$symbols = foreach($t in $Ticker){ $x=$t.Trim(); if($x -notmatch '\.'){"$x.TW"} else {$x} }
$symbolsArg = ($symbols -join ',')

$datasets = @(); if($DoPrices){$datasets+='TaiwanStockPrice'}; if($DoChip){$datasets+='TaiwanStockInstitutionalInvestorsBuySell'}
if(-not $datasets){ throw "未選任何資料集（-DoPrices / -DoChip）" }

# 將 QPS 寫入環境（僅本次、之後還原），Python 內用 FINMIND_QPS 讀取
$prevQps = $env:FINMIND_QPS
$env:FINMIND_QPS = ('{0}' -f $Qps)

Write-Host "[Backfill] symbols=$symbolsArg, window=$startStr → $endStrEx (end exclusive)"
try{
  foreach($ds in $datasets){
    Write-Host "  - dataset=$ds, qps=$($env:FINMIND_QPS)"
    & $PY .\scripts\finmind_backfill.py `
      --datasets $ds --symbols $symbolsArg `
      --start $startStr --end $endStrEx `
      --datahub-root $DataRoot
  }
} finally {
  if($null -ne $prevQps){ $env:FINMIND_QPS = $prevQps } else { Remove-Item Env:FINMIND_QPS -EA SilentlyContinue }
}
Write-Host "Done."

