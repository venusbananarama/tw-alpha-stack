# Run-Backfill-All_v2.ps1
# AlphaCity · 一鍵：回補至最新(expect_date) → Preflight → WF→Gate → 快照（修正：避免 Keys 枚舉期間變更集合）
# Usage:
#   pwsh -File .\Run-Backfill-All_v2.ps1 -RootPath 'C:\AI\tw-alpha-stack' -MaxRetries 2

[CmdletBinding()]
param(
  [string]$RootPath = 'C:\AI\tw-alpha-stack',
  [int]$MaxRetries = 2
)

$ErrorActionPreference = 'Stop'
$ProgressPreference    = 'SilentlyContinue'

if (-not (Test-Path $RootPath)) { throw "RootPath not found: $RootPath" }
Set-Location $RootPath

$PY = Join-Path $RootPath '.venv\Scripts\python.exe'
if (-not (Test-Path $PY)) { throw "找不到 Python venv：$PY" }

# UTF-8 輸出，避免 cp950/emoji 造成寫檔錯
chcp 65001 > $null 2>&1
[Console]::OutputEncoding = [System.Text.UTF8Encoding]::new()
$env:PYTHONIOENCODING = 'utf-8'
$env:PYTHONUTF8       = '1'

# KILLSWITCH 與 FinMind 權杖/URL
if (-not $env:ALPHACITY_ALLOW) { $env:ALPHACITY_ALLOW = '1' }
if (-not $env:FINMIND_TOKEN)   { throw 'FINMIND_TOKEN 未設定（必填）' }
$env:FINMIND_BEARER   = "Bearer $($env:FINMIND_TOKEN)"
if (-not $env:FINMIND_BASE_URL) { $env:FINMIND_BASE_URL = 'https://api.finmindtrade.com/api/v4/data' }
$env:FINMIND_BASE_URL = ($env:FINMIND_BASE_URL -replace '[^\x20-\x7E]','').Trim('"').Trim()
$u = $null
[Uri]::TryCreate("$($env:FINMIND_BASE_URL)?dataset=TaiwanStockDividend&start_date=2025-01-01&end_date=2025-01-02",[UriKind]::Absolute,[ref]$u) | Out-Null
if (-not $u) { throw "FINMIND_BASE_URL 無效：$($env:FINMIND_BASE_URL)" }

# 固定 --datahub-root 指到 datahub 根；禁止指向銀層
$DataHubRoot = Join-Path $RootPath 'datahub'
$Rules = Join-Path $RootPath 'rules.yaml'

function Invoke-WithRetry {
  param([scriptblock]$Action, [int]$Retries = 2, [int]$DelaySec = 30, [string]$Name = 'task')
  $attempt=0
  while ($true) {
    try { & $Action; return } catch {
      $attempt++
      if ($attempt -gt $Retries) {
        throw "Failed $Name after $Retries retries: $($_.Exception.Message)"
      }
      Write-Warning ("{0} failed (attempt {1}/{2}): {3}" -f $Name,$attempt,$Retries,$_.Exception.Message)
      Start-Sleep -Seconds $DelaySec
    }
  }
}

# 1) Preflight → 取得 expect_date（=T0+1；--end 為不含）
Invoke-WithRetry -Name 'preflight' -Action { & $PY ".\scripts\preflight_check.py" --rules $Rules --export ".\reports" --root "." | Out-Null }
$pf1 = Get-Content .\reports\preflight_report.json -Raw | ConvertFrom-Json
$To  = $pf1.meta.expect_date

function NextDay([string]$d) {
  if ([string]::IsNullOrWhiteSpace($d)) { return $null }
  ([datetime]$d).AddDays(1).ToString('yyyy-MM-dd')
}

# 構建 from 視窗（ordered 僅為可讀性）
$from = [ordered]@{
  prices   = NextDay $pf1.freshness.prices.max_date
  chip     = NextDay $pf1.freshness.chip.max_date
  per      = NextDay $pf1.freshness.per.max_date
  dividend = NextDay $pf1.freshness.dividend.max_date
}

# **修正點**：快照 Keys → 再補缺值，避免「Collection was modified」
$keys = @($from.Keys)
foreach ($k in $keys) {
  if ([string]::IsNullOrWhiteSpace($from[$k])) {
    $from[$k] = '2018-01-01'
  }
}

# 2) 回補（全市場；不帶 symbols）
function Backfill-Dataset {
  param([ValidateSet('prices','chip','per','dividend')][string]$Kind,[string]$Start,[string]$End)
  if ([datetime]$Start -ge [datetime]$End) { Write-Host "[Skip] $Kind up-to-date ($Start .. < $End)"; return }
  $dataset = switch ($Kind) {
    'prices'   {'TaiwanStockPrice'}
    'chip'     {'TaiwanStockInstitutionalInvestorsBuySell'}
    'per'      {'TaiwanStockPER'}
    'dividend' {'TaiwanStockDividend'}
  }
  $args = @(".\scripts\finmind_backfill.py","--datasets",$dataset,"--start",$Start,"--end",$End,"--datahub-root",$DataHubRoot)
  Write-Host ("→ Backfill {0} {1} .. < {2}  ({3})" -f $Kind,$Start,$End,$dataset)
  $p = Start-Process -FilePath $PY -ArgumentList $args -NoNewWindow -PassThru -Wait
  if ($p.ExitCode -ne 0) { throw "Backfill $Kind failed with exit code $($p.ExitCode)" }
}

Invoke-WithRetry -Name 'backfill prices'   -Retries $MaxRetries -Action { Backfill-Dataset prices   $from.prices   $To }
Invoke-WithRetry -Name 'backfill chip'     -Retries $MaxRetries -Action { Backfill-Dataset chip     $from.chip     $To }
Invoke-WithRetry -Name 'backfill per'      -Retries $MaxRetries -Action { Backfill-Dataset per      $from.per      $To }
Invoke-WithRetry -Name 'backfill dividend' -Retries $MaxRetries -Action { Backfill-Dataset dividend $from.dividend $To }

# 3) Preflight（驗收 freshness/schema/calendar）
Invoke-WithRetry -Name 'preflight (post)' -Action { & $PY ".\scripts\preflight_check.py" --rules $Rules --export ".\reports" --root "." | Out-Null }
$pf2 = Get-Content .\reports\preflight_report.json -Raw | ConvertFrom-Json

# 4) Walk-Forward → Gate（自動尋路 Gate 腳本）
$wf = Join-Path $RootPath 'scripts\wf_runner.py'
if (Test-Path $wf) {
  Invoke-WithRetry -Name 'wf_runner' -Action { & $PY $wf --dir ".\runs\wf_configs" --export ".\reports" }
}
$gateCandidates = @('.\tools\Run-WFGate.ps1','.\tools\Run-PreflightAndGate.ps1')
$gate = $gateCandidates | Where-Object { Test-Path $_ } | Select-Object -First 1
if ($gate) { powershell -NoProfile -ExecutionPolicy Bypass -File $gate }

# 5) 生成交接快照（§17 模板口徑）
$uniPath  = Join-Path $RootPath 'configs\investable_universe.txt'
$uniLines = if (Test-Path $uniPath) { (Get-Content $uniPath | Measure-Object -Line).Lines } else { 0 }
$pp  = & $PY -c "import pandas,pyarrow,platform;print(platform.python_version(),pandas.__version__,pyarrow.__version__)"
$snap = @()
$snap += "[AlphaCity 快照] date=$(Get-Date -Format yyyy-MM-dd)"
$snap += "python/pandas/pyarrow= $pp"
$snap += ("freshness(before→after): prices={0}→{1}  chip={2}→{3}  dividend={4}→{5}  per={6}→{7}" -f `
  $pf1.freshness.prices.max_date,   $pf2.freshness.prices.max_date, `
  $pf1.freshness.chip.max_date,     $pf2.freshness.chip.max_date, `
  $pf1.freshness.dividend.max_date, $pf2.freshness.dividend.max_date, `
  $pf1.freshness.per.max_date,      $pf2.freshness.per.max_date )
$snap += "universe_lines=$uniLines"
$gateJson = Join-Path $RootPath 'reports\gate_summary.json'
if (Test-Path $gateJson) {
  $gs = Get-Content $gateJson -Raw | ConvertFrom-Json
  if ($gs) { $snap += "wf_pass=$($gs.wf.pass_rate)  gate=$($gs.overall)" }
}
$snapPath = Join-Path $RootPath 'reports\snapshot.txt'
$snap -join "`r`n" | Out-File -FilePath $snapPath -Encoding utf8

Write-Host "✔ 完成。已寫入 $(Resolve-Path $snapPath)"
