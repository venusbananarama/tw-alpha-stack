<#
.SYNOPSIS
  AlphaCity Phase-1 ‰∏ÄÈçµÈ©óÊî∂ÔºàË≥áÊñôÂü∫Âª∫ & ÂõûÊ∏¨Ê†∏ÂøÉÔºâ

.NOTES
  ÊúÉÂú® metrics\phase1_manifest_latest.json ÂØ´ÂÖ•Êú¨Ê¨°Ëº∏Âá∫Ê∏ÖÂñÆÔºåÊñπ‰æøÂõûÊªæÊ∏ÖÁêÜ„ÄÇ
#>
param(
  [string]$Root   = 'G:/AI/tw-alpha-stack',
  [string]$Symbol = '2330.TW',
  [string]$Start  = (Get-Date).AddDays(-7).ToString('yyyy-MM-dd'),
  [string]$End    = (Get-Date).ToString('yyyy-MM-dd')
)
Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'
function Step { param([string]$Name,[scriptblock]$Action)
  $sw=[Diagnostics.Stopwatch]::StartNew()
  Write-Host "`n=== [$Name] ===" -ForegroundColor Cyan
  try { & $Action; $sw.Stop(); Write-Host "‚úî [$Name] OK ($($sw.Elapsed))" -ForegroundColor Green }
  catch { $sw.Stop(); Write-Host "‚úó [$Name] FAIL ($($sw.Elapsed))" -ForegroundColor Red; Write-Host $_.Exception.Message -ForegroundColor Red; throw }
}
function Invoke-IfExists { param([string]$Path,[string[]]$Args)
  if(Test-Path $Path){ & $Path @Args } else { Write-Host "Ë∑≥ÈÅéÔºàÊâæ‰∏çÂà∞ÔºâÔºö$Path" -ForegroundColor Yellow }
}
Set-Location $Root
$manifest = [ordered]@{
  run_id = (Get-Date -UFormat %Y%m%d-%H%M%S);
  root   = $Root; start=$Start; end=$End; symbol=$Symbol;
  outputs = @();
  logs    = @();
}
# 0) Ê™¢Êü•
Step 'Layout Check' { Invoke-IfExists "$Root/tools/Check-CanonicalLayout.ps1" @('-Strict') }
Step 'Env Check'    { Invoke-IfExists "$Root/tools/check_env.ps1" @() }
# 1) Ë°å‰∫ãÊõÜ
if(Test-Path "$Root/tools/Normalize-Calendar.ps1"){ Step 'Normalize Calendar' { & "$Root/tools/Normalize-Calendar.ps1" } }
# 2) ÂÖ®Â∏ÇÂ†¥Â¢ûÈáè
Step 'FM Backfill (All, 7D, price+inst)' {
  & "$Root/scripts/ps/Invoke-FMBackfill.ps1" -Start $Start -End $End -Datasets @('TaiwanStockPrice','TaiwanStockInstitutionalInvestorsBuySell') -Universe TSE -Workers 6 -Qps 1.6 -VerboseCmd
  $manifest.logs += "$Root/metrics/fetch_backfill_latest.log"
}
# 3) ÂñÆËÇ°Ôºàdate_id ÊäΩÊ∏¨Ôºâ
Step 'FM Single (date_id sample)' {
  & "$Root/scripts/ps/Invoke-FMSingle.ps1" -Start '2015-01-01' -End $End -Symbol $Symbol -Datasets @('TaiwanStockFinancialStatements','TaiwanStockBalanceSheet','TaiwanStockCashFlowsStatement','TaiwanStockDividend','TaiwanStockPER')
  $manifest.logs += "$Root/metrics/fetch_single_latest.log"
}
# 4) Âõ†Â≠êÈÄ±Ê™¢
Step 'Weekly Factors Smoke' { & "$Root/tools/Run-SmokeTests.ps1" }
# 5) ÂõûÊ∏¨
$runRoot = 'G:/AI/datahub/alpha/backtests/_phase1_validation'
$newId   = Get-Date -UFormat %Y%m%d-%H%M%S
$outDir  = Join-Path $runRoot $newId
New-Item -ItemType Directory -Force $outDir | Out-Null
Step 'Backtest TopN' {
  & python "$Root/backtest/longonly_topN.py" --factors 'G:/AI/datahub/alpha/alpha_factors_fixed.parquet' --out-dir $outDir --config "$Root/configs/backtest_topN_fixed.yaml"
}
$manifest.outputs += $outDir
# 6) Â†±Ë°®
Step 'Make Report' {
  $nav = Get-ChildItem -Path $outDir -Recurse -Filter nav_clean.csv | Select-Object -First 1
  if (-not $nav) { throw "nav_clean.csv not found in $outDir" }
  $repDir = 'G:/AI/datahub/alpha/reports'
  & python "$Root/make_report_safe.py" --nav-csv $nav.FullName --out-dir $repDir
  $manifest.outputs += $repDir
}
# 7) AckLiveÔºàÂèØÈÅ∏Ôºâ
if (Test-Path "$Root/AlphaCity_v63_live_addon_v2/tools/AckLive.ps1") {
  . "$Root/AlphaCity_v63_live_addon_v2/tools/AckLive.ps1"
  Step 'AckLive Summary' {
    acklive -Start $Start -End $End -Symbol $Symbol -NoFsScan
  }
  $manifest.logs += "$Root/AlphaCity_v63_live_addon_v2/logs/acklive.log"
}
# ÂØ´ÂÖ• manifest
$manPath = "$Root/metrics/phase1_manifest_latest.json"
New-Item -ItemType Directory -Force (Split-Path $manPath) | Out-Null
$manifest | ConvertTo-Json -Depth 4 | Set-Content -Encoding UTF8 $manPath
Write-Host "`nüìÑ Manifest written: $manPath" -ForegroundColor Cyan
Write-Host "üéâ Phase-1 validation finished." -ForegroundColor Green
