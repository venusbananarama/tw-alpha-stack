<#
Backfill full market (prices/chip/per/dividend) to expect_date using investable_universe.txt
- ALPHACITY_ALLOW == "1" required.
- Supports optional -End yyyy-MM-dd (exclusive) to override expect_date.
#>
param(
  [string]$RootPath = "C:\AI\tw-alpha-stack",
  [int]$Batch = 400,
  [int]$MaxRetries = 6,
  [switch]$FillGaps,
  [switch]$Force,
  [switch]$Verbose,
  [string]$End = ""   # ← 新增：覆寫 expect_date（不含）
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'
Set-Location $RootPath
if (-not $env:ALPHACITY_ALLOW -or $env:ALPHACITY_ALLOW -ne '1') { Write-Error "ALPHACITY_ALLOW != 1"; exit 1 }

$PY = ".\.venv\Scripts\python.exe"
if (-not (Test-Path $PY)) { Write-Error "Python not found: $PY"; exit 2 }

$ts = (Get-Date).ToString('yyyyMMdd_HHmmss')
$logFile     = Join-Path $RootPath ("reports\backfill_full_$ts.log")
$summaryFile = Join-Path $RootPath ("reports\backfill_summary_$ts.json")

function Log([string]$m){ $line = "[{0}] {1}" -f (Get-Date).ToString('s'), $m; $line | Tee-Object -FilePath $logFile -Append | Out-Null; if ($Verbose){ Write-Host $line } }

# preflight
Log "RUN preflight_check.py"
& $PY .\scripts\preflight_check.py --rules .\rules.yaml --export .\reports --root . 2>&1 | Tee-Object -FilePath $logFile -Append | Out-Null
$pf = Get-Content .\reports\preflight_report.json -Raw | ConvertFrom-Json

# expect_date（可被 -End 覆寫）
$expect_date = $null
if ($pf.meta -and $pf.meta.expect_date) { $expect_date = $pf.meta.expect_date } elseif ($pf.expect_date) { $expect_date = $pf.expect_date }
if ($End) {
  try { $tmp = [datetime]::ParseExact($End,'yyyy-MM-dd',$null); $expect_date = $tmp.ToString('yyyy-MM-dd') }
  catch { Write-Error "Invalid -End format: $End (yyyy-MM-dd required)"; exit 3 }
}
if (-not $expect_date) { Write-Error "Cannot determine expect_date"; exit 4 }
Log ("expect_date (exclusive) = {0}" -f $expect_date)

function NextDayOf($d){ if (-not $d) { return $null } return ((Get-Date $d).AddDays(1)).ToString('yyyy-MM-dd') }
$start_prices = NextDayOf $pf.freshness.prices.max_date
$start_chip   = NextDayOf $pf.freshness.chip.max_date
$start_per    = NextDayOf $pf.freshness.per.max_date
$start_div    = NextDayOf $pf.freshness.dividend.max_date
Log "starts: prices=$start_prices chip=$start_chip per=$start_per dividend=$start_div"

# universe
$uFile = Join-Path $RootPath 'configs\investable_universe.txt'
if (-not (Test-Path $uFile)) { Write-Error "Missing $uFile"; exit 5 }
$allsyms = Get-Content $uFile | Where-Object { $_ -and -not [string]::IsNullOrWhiteSpace($_) } | ForEach-Object { $_.Trim() }
if ($allsyms.Count -eq 0) { Write-Error "Empty investable_universe.txt"; exit 6 }
Log "universe_count = $($allsyms.Count)"

function Chunk($arr,[int]$size){ for($i=0;$i -lt $arr.Count;$i+=$size){ $e=[Math]::Min($i+$size-1,$arr.Count-1); ,($arr[$i..$e]) } }

function Invoke-Backfill([string]$dataset,[string[]]$symbols,[string]$start,[string]$end,[bool]$force=$false){
  $symList = $symbols -join ','
  $args = @('.\scripts\finmind_backfill.py','--datasets',$dataset,'--symbols',$symList,'--start',$start,'--end',$end,'--datahub-root','datahub')
  if ($force) { $args += '--force' }
  $attempt=0
  while($attempt -le $MaxRetries){
    $attempt++
    try{
      Log ("CALL: {0}" -f ($args -join ' '))
      $out = & $PY $args 2>&1
      $txt = ($out -join "`n")
      $txt | Tee-Object -FilePath $logFile -Append | Out-Null
      if ($txt -match '(HTTP\s*402|\b402\b|quota|Quota)'){
        Log "402/quota detected → wait until next whole hour + 5s"
        $now=Get-Date; $h=$now.AddHours(1); $next = Get-Date -Year $h.Year -Month $h.Month -Day $h.Day -Hour $h.Hour -Minute 0 -Second 5
        Start-Sleep -Seconds [Math]::Ceiling(($next-$now).TotalSeconds)
        continue
      }
      $m=[regex]::Match($txt,'rows_written\s*[:=]?\s*(\d+)','IgnoreCase'); $rows= ($m.Success)?([int]$m.Groups[1].Value):0
      return @{ok=$true;rows=$rows}
    } catch {
      Log ("error attempt {0}: {1}" -f $attempt,$_.Exception.Message)
      if ($attempt -gt $MaxRetries){ return @{ok=$false;err=$_.Exception.Message} }
      $backoff=[Math]::Pow(2,$attempt)*5; Log "sleep $backoff s"; Start-Sleep -Seconds $backoff
    }
  }
}

$summary=@{}
$datasets=@(
  @{name='TaiwanStockPrice'; start=$start_prices},
  @{name='TaiwanStockInstitutionalInvestorsBuySell'; start=$start_chip},
  @{name='TaiwanStockPER'; start=$start_per},
  @{name='TaiwanStockDividend'; start=$start_div}
)

$endDT=[datetime]::ParseExact($expect_date,'yyyy-MM-dd',$null)
foreach($ds in $datasets){
  $dname=$ds.name; $dstart=$ds.start
  if (-not $dstart){ Log "SKIP $dname: start=null"; $summary[$dname]=@{skipped=$true;rows=0;reason='no-start'}; continue }
  $sDT=[datetime]::ParseExact($dstart,'yyyy-MM-dd',$null)
  if ($sDT -ge $endDT){ Log "SKIP $dname: start($dstart) >= end($expect_date)"; $summary[$dname]=@{skipped=$true;rows=0;reason='start>=end'}; continue }

  Log "==== Dataset: $dname | $dstart .. < $expect_date ===="
  $total=0; $chunks=Chunk $allsyms $Batch; $i=0
  foreach($chunk in $chunks){
    $i++; Log "batch $i / $($chunks.Count) symbols=$($chunk.Count)"
    $res = Invoke-Backfill -dataset $dname -symbols $chunk -start $dstart -end $expect_date -force:$Force.IsPresent
    if ($res.ok){ $total += $res.rows; Log "batch $i rows_written=$($res.rows)" }
    else { Log "batch $i FAILED: $($res.err)"; $summary["${dname}_error_batch_$i"]=$res.err }
    Start-Sleep -Seconds 3
  }
  $summary[$dname]=@{skipped=$false;rows=$total}
  Log "==== Finished $dname total_rows=$total ===="
}

$summary | ConvertTo-Json -Depth 6 | Out-File -FilePath $summaryFile -Encoding utf8
Log "Summary -> $summaryFile"

Log "RUN final preflight"
& $PY .\scripts\preflight_check.py --rules .\rules.yaml --export .\reports --root . 2>&1 | Tee-Object -FilePath $logFile -Append | Out-Null
$pf2 = Get-Content .\reports\preflight_report.json -Raw | ConvertFrom-Json
Log ("PREFLIGHT AFTER -> prices={0} chip={1} per={2} dividend={3}" -f $pf2.freshness.prices.max_date,$pf2.freshness.chip.max_date,$pf2.freshness.per.max_date,$pf2.freshness.dividend.max_date)
Log "DONE"
