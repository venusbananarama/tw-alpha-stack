param(
  [Parameter(Mandatory=$true)][datetime]$Start,
  [datetime]$End,
  [int]$WindowDays = 1,
  [int]$Workers    = 1,
  [int]$BatchSize  = 60,
  [int]$ThrottleRPM = 12,
  [int]$MaxRPM      = 12,
  [int]$StepRPM     = 0,
  [int]$RampEveryWins = 0,
  [int]$BackoffSeconds = 30,
  [int]$MaxBackoffSeconds = 1800,
  [int]$MaxRetriesPerWin = 6,
  [string]$Tag = 'S1_hist',
  [string]$Group = 'ALL',
  [switch]$SmartSkip,
  [int]$SkipM = 12,
  [int]$SkipJumpYears = 2,
  [switch]$UseCheckpoint,
  [string]$CheckpointPath = '.\state\dateid_checkpoint.json',
  [switch]$NoLock
)
# --- Normalize End (respect CLI -End) ---
if ( $PSBoundParameters.ContainsKey('End') -and \ ) {
  \ = [datetime](Get-Date \)
} else {
  \ = Get-Date
}
# --- End Normalize ---


$ErrorActionPreference='Stop'

function Resolve-Root {
  if($env:ALPHACITY_ROOT){
    try{
      $c = (Resolve-Path $env:ALPHACITY_ROOT).Path
      $hasTools   = Test-Path (Join-Path $c 'tools')
      $hasConfigs = Test-Path (Join-Path $c 'configs')
      if($hasTools -and $hasConfigs){ return $c }
    }catch{}
  }
  $d = Split-Path -Parent $PSCommandPath
  if([string]::IsNullOrWhiteSpace($d)){ $d = (Get-Location).Path }
  $cur = Get-Item $d
  for($i=0; $i -lt 6 -and $cur; $i++){
    $hasTools   = Test-Path (Join-Path $cur.FullName 'tools')
    $hasConfigs = Test-Path (Join-Path $cur.FullName 'configs')
    if($hasTools -and $hasConfigs){ return $cur.FullName }
    $cur = $cur.Parent
  }
  return (Resolve-Path '.').Path
}

function Read-Ids([string]$path){
  if(-not (Test-Path $path)){ return @() }
  Get-Content $path | Where-Object { $_ -match '^\s*\d{4}\s*$' } | ForEach-Object { $_.Trim() }
}

function Set-RPM([int]$rpm, [string]$log){
  if($rpm -lt 1){ $rpm = 1 }
  $env:FINMIND_THROTTLE_RPM = "$rpm"
  ("[Ramp] FINMIND THROTTLE RPM={0}" -f $rpm) | Tee-Object -FilePath $log -Append | Out-Host
}

function Has402([string[]]$lines){
  foreach($l in $lines){
    if($l -match 'HTTP\s+402' -or $l -match 'StatusCode:\s*402' -or $l -match 'Payment Required'){ return $true }
  }
  return $false
}

# --- Root / 路徑 ---
$root       = Resolve-Root
$toolsDir   = Join-Path $root 'tools'
$reportsDir = Join-Path $root 'reports'
$stateDir   = Join-Path $root 'state'
New-Item -ItemType Directory -Force -Path $reportsDir,$stateDir | Out-Null
("[ROOT] {0}" -f $root) | Tee-Object -FilePath (Join-Path $reportsDir 'root_trace.log') -Append | Out-Host

# --- Log 命名 ---
$ts  = Get-Date -Format 'yyyyMMdd_HHmmss'
$log = Join-Path $reportsDir ("fullmarket_maxrate_{0}_{1}.log" -f $Tag,$ts)
("Log: {0}" -f $log) | Tee-Object -FilePath $log -Append | Out-Host

# --- Engine 掃描（字串名單→Join-Path→存在檢查） ---
$engineCandidates = @('Run-FullMarket-DateID-MaxRate.ps1','Run-FullMarket-DateIDMaxRate.ps1') |
  ForEach-Object { Join-Path $toolsDir $_ }
$engine = $engineCandidates | Where-Object { Test-Path -LiteralPath $_ } | Select-Object -First 1
if(-not $engine){ "[Error] engine not found" | Tee-Object -FilePath $log -Append | Out-Host; exit 2 }
("[Engine] {0}" -f $engine) | Tee-Object -FilePath $log -Append | Out-Host

# --- 名單（Group ∩ Universe） ---
$groupFile = Join-Path $root ("configs\groups\{0}.txt" -f $Group)
if(-not (Test-Path $groupFile)){ throw "Group file not found: $groupFile" }
$all = Read-Ids $groupFile

$uniFile = Join-Path $root 'configs\investable_universe.txt'
$ids = $all
if(Test-Path $uniFile){
  $u = Read-Ids $uniFile
  if($u.Count -gt 0){ $ids = $all | Where-Object { $u -contains $_ } }
}
("[GroupCheck] {0}.txt 行數={1} sample={2}" -f $Group, $all.Count, (($all | Select-Object -First 5) -join ',')) | Tee-Object -FilePath $log -Append | Out-Host
("[GroupCheck] 與 Universe 交集後 N={0}" -f $ids.Count) | Tee-Object -FilePath $log -Append | Out-Host

# --- Lock（可用 -NoLock 旁路） ---
$lockFile = Join-Path $stateDir 'Run-Max-Recent.lock'
if(-not $NoLock){
  if(Test-Path $lockFile){
    try{
      $j = Get-Content $lockFile -Raw | ConvertFrom-Json
      $age = if($j.ts){ [int]((Get-Date) - [datetime]$j.ts).TotalMinutes } else { 999 }
      $alive = $false; if($j.pid){ $alive = [bool](Get-Process -Id $j.pid -ErrorAction SilentlyContinue) }
      if($alive -and $age -lt 30){
        "lock active: $lockFile (pid=$($j.pid) tag=$($j.tag))" | Tee-Object -FilePath $log -Append | Out-Host
        exit 1
      }
    }catch{}
    Remove-Item $lockFile -Force -ErrorAction SilentlyContinue
  }
  @{ ts=(Get-Date).ToString('s'); pid=$PID; tag=$Tag } | ConvertTo-Json | Set-Content $lockFile -Encoding UTF8
}

# --- 參數／狀態 ---
Set-RPM $ThrottleRPM $log
$wrap = Join-Path $stateDir 'engine_transcript_wrapper.ps1'
if(-not (Test-Path $wrap)){ throw "wrapper missing: $wrap" }

$wStart    = [datetime]$Start
$wEndLimit = if($PSBoundParameters.ContainsKey('End')){ [datetime]$End } else { Get-Date }
$successfulWins = 0
$backoff = [Math]::Max(1,$BackoffSeconds)
$emptyWins = 0
$lastOut = @()

try{
  while($wStart -lt $wEndLimit){
    $wEnd = $wStart.AddDays($WindowDays)
    if($wEnd -gt $wEndLimit){ $wEnd = $wEndLimit }
    $winDays = [Math]::Max(1, ($wEnd - $wStart).Days)

    "=== {0} -> {1} === IDs~{2} rpm={3}" -f $wStart.ToString('yyyy-MM-dd'),$wEnd.ToString('yyyy-MM-dd'),$ids.Count,$env:FINMIND_THROTTLE_RPM | Tee-Object -FilePath $log -Append | Out-Host

    $engineArgs = @('-Start', $wStart.ToString('yyyy-MM-dd'),
                    '-BatchSize', $BatchSize,
                    '-WindowDays', $winDays,
                    '-Workers',    $Workers)

    $attempt = 0; $done = $false
    while(-not $done){
      $attempt++
      "[Invoke] engine: {0} start={1} win={2} workers={3} batch={4} try={5}" -f $engine,$wStart.ToString('yyyy-MM-dd'),$winDays,$Workers,$BatchSize,$attempt | Tee-Object -FilePath $log -Append | Out-Host

      $buffer = New-Object System.Collections.Generic.List[string]
      & pwsh -NoProfile -ExecutionPolicy Bypass -File $wrap `
        -EnginePath $engine -LogPath $log @engineArgs *>&1 |
        ForEach-Object { $s = [string]$_; [void]$buffer.Add($s); $s } |
        Out-Host

      $lastOut = $buffer.ToArray()
      $exit    = $LASTEXITCODE
      "[Invoke] exit={0} lines={1}" -f ($exit ?? 0), ($lastOut.Count ?? 0) | Tee-Object -FilePath $log -Append | Out-Host

      if(Has402 $lastOut){
        $new = [int]([int]$env:FINMIND_THROTTLE_RPM/2); if($new -lt 1){ $new = 1 }
        "[Backoff] HTTP 402 -> sleep {0}s ; rpm {1}->{2}" -f $backoff,$env:FINMIND_THROTTLE_RPM,$new | Tee-Object -FilePath $log -Append | Out-Host
        Set-RPM $new $log
        Start-Sleep -Seconds $backoff
        if($backoff -lt $MaxBackoffSeconds){ $backoff = [Math]::Min($MaxBackoffSeconds, [int]([double]$backoff*1.5)) }
        if($attempt -lt $MaxRetriesPerWin){ continue } else {
          "[Backoff] Max retries reached -> skip window" | Tee-Object -FilePath $log -Append | Out-Host
          $successfulWins = 0; $done = $true
        }
      } else {
        $backoff = $BackoffSeconds
        $successfulWins++
        if($RampEveryWins -gt 0 -and $successfulWins % $RampEveryWins -eq 0 -and [int]$env:FINMIND_THROTTLE_RPM -lt $MaxRPM){
          $next = [Math]::Min($MaxRPM, [int]$env:FINMIND_THROTTLE_RPM + $StepRPM)
          if($next -ne [int]$env:FINMIND_THROTTLE_RPM){ Set-RPM $next $log }
        }
        $done = $true
      }
    } # retry

    if($SmartSkip){
      $hasRows = $false
      foreach($l in $lastOut){
        if($l -match 'total_rows\s*=\s*(\d+)' -or $l -match '\brows\s*=\s*(\d+)'){
          if([int]$Matches[1] -gt 0){ $hasRows = $true; break }
        }
      }
      if($hasRows){ $emptyWins = 0 } else { $emptyWins++ }
      if($emptyWins -ge $SkipM){
        "[SmartSkip] empty {0} windows -> +{1}y" -f $SkipM,$SkipJumpYears | Tee-Object -FilePath $log -Append | Out-Host
        $wStart = $wStart.AddYears($SkipJumpYears); $emptyWins = 0; continue
      }
    }

    if($UseCheckpoint){
      $ckPath = if([IO.Path]::IsPathRooted($CheckpointPath)){ $CheckpointPath } else { Join-Path $root $CheckpointPath }
      $ckDir  = Split-Path -Parent $ckPath
      if(-not (Test-Path $ckDir)){ New-Item -ItemType Directory -Force -Path $ckDir | Out-Null }
      [pscustomobject]@{ updated=(Get-Date).ToString('o'); tag=$Tag; group=$Group; last_end=$wEnd.ToString('yyyy-MM-dd') } |
        ConvertTo-Json | Set-Content -Path $ckPath -Encoding UTF8
    }

    $wStart = $wEnd
  } # while

  "S1 batch DONE" | Tee-Object -FilePath $log -Append | Out-Host
}
finally{
  if(-not $NoLock -and (Test-Path $lockFile)){
    try{
      $j = Get-Content $lockFile -Raw | ConvertFrom-Json
      if($j -and $j.pid -eq $PID){ Remove-Item $lockFile -Force }
    }catch{ Remove-Item $lockFile -Force }
  }
}
