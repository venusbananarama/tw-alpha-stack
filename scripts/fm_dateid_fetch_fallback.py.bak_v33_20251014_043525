# coding: utf-8
import sys, os, subprocess
from datetime import datetime, timedelta

def run(cmd):
    return subprocess.run(cmd).returncode

argv = sys.argv[1:]
script_dir = os.path.dirname(os.path.abspath(__file__))
orig = os.path.join(script_dir, "fm_dateid_fetch.py")

def get_arg(name, default=None):
    try:
        i = argv.index(name)
    except ValueError:
        return default
    return argv[i+1] if i+1 < len(argv) else default

def set_or_add_arg(lst, flag, value):
    if flag in lst:
        j = lst.index(flag)
        if j+1 < len(lst):
            lst[j+1] = value
        else:
            lst += [flag, value]
    else:
        lst += [flag, value]
    return lst

def strip_wrapper_flags(lst):
    # do not forward wrapper-only flags to the underlying script
    return [x for x in lst if x != "--strict"]

# --- CLI normalization: accept --datasets/--ids and translate to --dataset/--id-key/--symbols ---
datasets = []
ds = get_arg("--datasets") or get_arg("--dataset")
if ds:
    datasets = [x.strip() for x in ds.split(",") if x.strip()]
else:
    datasets = []
ids = get_arg("--ids") or get_arg("--symbols")
target_ds = datasets[0] if datasets else None

def infer_id_key(ds):
    if ds in {"TaiwanStockKBar", "TaiwanStockPrice"}:
        return "stock_id"
    return "data_id"

strict = ("--strict" in argv)

def normalize_args(args):
    a = list(args)
    if "--datasets" in a and "--dataset" not in a and target_ds:
        a = set_or_add_arg(a, "--dataset", target_ds)
        i = a.index("--datasets"); del a[i:i+2]
    if "--ids" in a and "--symbols" not in a and ids:
        a = set_or_add_arg(a, "--symbols", ids)
        i = a.index("--ids"); del a[i:i+2]
    if "--id-key" not in a and target_ds:
        a = set_or_add_arg(a, "--id-key", infer_id_key(target_ds))
    return a

def call_orig(args):
    na = strip_wrapper_flags(normalize_args(args))
    if os.environ.get("WRAP_DEBUG")=="1":
        sys.stderr.write("DEBUG cmd: "+ " ".join([orig]+na) + "\n")
    return run([sys.executable, orig] + na)

# --- Fallback whitelist ---
FALLBACK_DS = {"TaiwanStockParValueChange","TaiwanStockShareholding"}
if target_ds not in FALLBACK_DS:
    sys.exit(call_orig(argv))

# 1) Try full range
rc = call_orig(argv)
if rc == 0:
    sys.exit(0)

# 2) Range -> daily fallback
start = get_arg("--start"); end = get_arg("--end")
if not start or not end:
    sys.exit(rc)
fmt = "%Y-%m-%d"
try:
    s = datetime.strptime(start, fmt); e = datetime.strptime(end, fmt)
except Exception:
    sys.exit(rc)
delta_days = max((e - s).days, 1)
any_failed = False
dsname = target_ds or "Dataset"
for i in range(delta_days):
    d1 = s + timedelta(days=i); d2 = d1 + timedelta(days=1)
    args = list(argv)
    args = set_or_add_arg(args, "--start", d1.strftime(fmt))
    args = set_or_add_arg(args, "--end",   d2.strftime(fmt))
    rc1 = call_orig(args)
    if rc1 != 0:
        any_failed = True
        if strict:
            sys.exit(rc1)
        else:
            sys.stderr.write(f"[WARN] {dsname} daily fetch failed for {d1.strftime(fmt)} (exit={rc1})\n")

sys.exit(0 if not any_failed else 1)
