from __future__ import annotations
import os, sys, time, json, pathlib
from datetime import datetime
from typing import List
import pandas as pd

try:
    import requests
except Exception as e:
    print("Missing requests: please run ./.venv/Scripts/pip.exe install requests", file=sys.stderr)
    raise

BASE_URL = "https://api.finmindtrade.com/api/v4/data"

def _fetch_one(dataset: str, id_key: str, symbol: str, start: str, end: str, token: str, timeout: int) -> pd.DataFrame:
    params = {"dataset": dataset, id_key: symbol, "start_date": start, "end_date": end}
    if token: params["token"] = token
    r = requests.get(BASE_URL, params=params, timeout=timeout)
    r.raise_for_status()
    payload = r.json()
    data = payload.get("data", [])
    df = pd.DataFrame(data)
    if not df.empty and "date" in df.columns:
        df["date"] = pd.to_datetime(df["date"], errors="coerce").dt.strftime("%Y-%m-%d")
    return df

def _write_parquet(df: pd.DataFrame, dataset: str, root: pathlib.Path, symbol: str) -> int:
    if df is None or df.empty:
        return 0
    if "date" in df.columns and not df["date"].isna().all():
        yyyymm = pd.to_datetime(df["date"]).dt.strftime("%Y%m").iloc[-1]
    else:
        yyyymm = datetime.utcnow().strftime("%Y%m")
    outdir = root / "silver" / "alpha" / "extra" / dataset / f"yyyymm={yyyymm}"
    outdir.mkdir(parents=True, exist_ok=True)
    fn = f"{dataset}_{symbol}.parquet"
    df.to_parquet(outdir / fn, index=False)
    return len(df)

def run(dataset: str, id_key: str, symbols: List[str], start: str, end: str, datahub_root: str,
        timeout: int, max_retries: int, rpm: int) -> None:
    token = os.environ.get("FINMIND_TOKEN", "")
    root = pathlib.Path(datahub_root)
    sleep = max(1.0, 60.0 / max(1, int(rpm)))
    total = 0
    for i, sym in enumerate(symbols, 1):
        tries = 0
        while True:
            try:
                df = _fetch_one(dataset, id_key, sym, start, end, token, timeout)
                total += _write_parquet(df, dataset, root, sym)
                break
            except Exception as e:
                tries += 1
                if tries > max_retries:
                    print(f"[FAIL] {dataset} {sym}: {e}", file=sys.stderr)
                    raise
                time.sleep(min(3 * tries, 30))
        time.sleep(sleep)
    print(f"[done] dataset={dataset} symbols={len(symbols)} rows={total}")

if __name__ == "__main__":
    import argparse
    ap = argparse.ArgumentParser()
    ap.add_argument("--dataset", required=True)
    ap.add_argument("--id-key", choices=["stock_id","data_id"], required=True)
    ap.add_argument("--symbols", required=True, help="comma separated IDs")
    ap.add_argument("--start", required=True)
    ap.add_argument("--end", required=True)   # 已是 +1d 後的『不含』終點
    ap.add_argument("--datahub-root", default="datahub")
    ap.add_argument("--timeout", type=int, default=30)
    ap.add_argument("--max-retries", type=int, default=2)
    ap.add_argument("--rpm", type=int, default=int(os.environ.get("FINMIND_THROTTLE_RPM","10")))
    args = ap.parse_args()
    symbols = [s.strip() for s in args.symbols.split(",") if s.strip()]
    if not symbols:
        print("No symbols provided.", file=sys.stderr)
        sys.exit(2)
    run(args.dataset, args.id_key, symbols, args.start, args.end, args.datahub_root,
        args.timeout, args.max_retries, args.rpm)
