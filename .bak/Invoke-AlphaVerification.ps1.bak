# Invoke-AlphaVerification.ps1 — fix6 v6.2.2
# Safe, backward-compatible improvements:
# - Prefer scripts\emit_metrics_always.py if present (guarantees a metrics CSV *per run*).
# - Primary binding by delta-scan (before/after); secondary by child output; tertiary by time-window.
# - No CLI/schema changes. Works with existing A–G packages.

param(
  [string]$Start,
  [string]$End,
  [switch]$SkipFull,
  [string]$Symbol = "2330.TW",
  [int]$Workers = 2,
  [double]$Qps = 1.0,
  [int]$PhaseTimeoutMins = 180,
  [string]$SummaryJsonPath = ".\metrics\verify_summary_latest.json",
  [string]$CalendarCsv = $null,
  [switch]$DisallowNoopFull,
  [switch]$DisallowNoopSingle,
  [switch]$StrictExitCode,
  [switch]$Quick,
  [switch]$VerboseCmd
)

$ErrorActionPreference = "Stop"
$PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
function Title($t){ Write-Host "`n=== $t ===`n" -ForegroundColor Cyan }

$runStart = Get-Date
$metricsDir = Join-Path (Resolve-Path ".").Path "metrics"
New-Item -ItemType Directory -Force -Path $metricsDir | Out-Null

# Snapshot BEFORE
$before = @{}
try {
  Get-ChildItem $metricsDir -Filter "ingest_summary_*_finmind.csv" -File 2>$null | ForEach-Object {
    $before[$_.FullName] = $_.Length
  }
} catch {}

if ($Quick) {
  $Start = (Get-Date).AddDays(-3).ToString('yyyy-MM-dd')
  $End   = (Get-Date).ToString('yyyy-MM-dd')
  $SkipFull = $true
}

if (-not $Start) { $Start = (Get-Date).AddDays(-3).ToString('yyyy-MM-dd') }
if (-not $End)   { $End   = (Get-Date).ToString('yyyy-MM-dd') }

Title "Skipping full-market phase by request."
if (-not $SkipFull) { Write-Host "[INFO] Full market phase not implemented in this minimal pack." }

Title "Running single-stock test on $Symbol ..."

$datasets = @("TaiwanStockPrice","TaiwanStockInstitutionalInvestorsBuySell")
$scriptPy = ".\scripts\finmind_backfill.py"
# Prefer the 'always' wrapper if available; else fall back
$wrapPy   = (Test-Path ".\scripts\emit_metrics_always.py") ? ".\scripts\emit_metrics_always.py" : ".\scripts\emit_metrics_wrapper.py"

$cli = @(
  $wrapPy,
  $scriptPy,
  "--start", $Start, "--end", $End,
  "--symbols", ($Symbol -replace '\.TW$',''),
  "--datasets"
) + $datasets + @("--workers", "$Workers", "--qps", "$Qps")

$python = ".\.venv\Scripts\python.exe"
$env:PYTHONUNBUFFERED = "1"
$env:PYTHONUTF8 = "1"

if ($VerboseCmd) { Write-Host ('[RUN] ' + $python + ' -X utf8 ' + ($cli -join ' ')) }

# Run and tee output
$childBuffer = (& $python -X utf8 @cli 2>&1 | Tee-Object -Variable _buf)
$exit = $LASTEXITCODE
Write-Host "[EXIT] $exit"

# Strategy 1: delta-scan AFTER
$latestCsv = $null
try {
  $after = Get-ChildItem $metricsDir -Filter "ingest_summary_*_finmind.csv" -File 2>$null
  $delta = @()
  foreach($f in $after){
    $sizeBefore = $before[$f.FullName]
    if (-not $sizeBefore) { $delta += $f }
    elseif ($f.Length -gt $sizeBefore) { $delta += $f }
  }
  if ($delta.Count -gt 0) {
    $latestCsv = ($delta | Sort-Object LastWriteTime -Descending | Select-Object -First 1)
    Write-Host "[INFO] Metrics bound by delta-scan: $($latestCsv.FullName)"
  }
} catch {
  Write-Warning "[WARN] Delta-scan failed: $($_.Exception.Message)"
}

# Strategy 2: parse child output
if (-not $latestCsv) {
  try {
    $txt = ($childBuffer | Out-String)
    $m = [regex]::Matches($txt, 'metrics:\s*([A-Za-z]:\\[^"\r\n]+?ingest_summary_[^"\r\n]*?_finmind\.csv)')
    if ($m.Count -gt 0) {
      $path = $m[$m.Count-1].Groups[1].Value.Trim()
      if (Test-Path -LiteralPath $path) {
        $latestCsv = Get-Item -LiteralPath $path
        Write-Host "[INFO] Metrics bound from child output: $($latestCsv.FullName)"
      }
    }
  } catch {
    Write-Warning "[WARN] Failed to parse child output for metrics path: $($_.Exception.Message)"
  }
}

# Strategy 3: time window (max(name_ts, mtime)) around runStart
if (-not $latestCsv) {
  try {
    $re = [regex]'ingest_summary_(\d{8})-(\d{6})_finmind\.csv$'
    $items = Get-ChildItem $metricsDir -Filter "ingest_summary_*_finmind.csv" -File 2>$null | ForEach-Object {
      $m = $_
      $tsM = $m.LastWriteTime
      $tsN = $null
      if ($re.IsMatch($m.Name)) {
        $g = $re.Match($m.Name).Groups
        try { $tsN = [datetime]::ParseExact($g[1].Value + $g[2].Value, 'yyyyMMddHHmmss', $null) } catch {}
      }
      $ts = if ($tsN -and ($tsN -gt $tsM)) { $tsN } else { $tsM }
      [pscustomobject]@{ File = $m; TsEff = $ts }
    }
    $winFrom = $runStart.AddMinutes(-60)
    $winTo   = $runStart.AddMinutes(60)
    $cand = $items | Where-Object { $_.TsEff -ge $winFrom -and $_.TsEff -le $winTo } | Sort-Object TsEff -Descending | Select-Object -First 1
    if ($cand) { $latestCsv = $cand.File; Write-Host "[INFO] Metrics bound from time window: $($latestCsv.FullName)" }
  } catch {
    Write-Warning "[WARN] Time-window scan failed: $($_.Exception.Message)"
  }
}

$rowsSum = 0
$landings = 0
$errorsCount = 0
if ($latestCsv) {
  try {
    $m = Import-Csv $latestCsv.FullName
    foreach($r in $m){
      $r_rows = 0; if ($r.PSObject.Properties['rows']) { [int]::TryParse(($r.rows -as [string]), [ref]$r_rows) | Out-Null }
      $rowsSum += $r_rows
      $ok = $false
      if ($r.PSObject.Properties['files']) { $ok = ([int]$r.files) -gt 0 }
      elseif ($r.PSObject.Properties['status']) { $ok = ($r.status -as [string]) -match '^OK\b' }
      if ($ok) { $landings += 1 }
      if ($r.PSObject.Properties['status'] -and ($r.status -as [string]) -match '^(x|ERR)') { $errorsCount += 1 }
    }
  } catch {
    Write-Warning "[WARN] Unable to parse metrics CSV: $($_.Exception.Message)"
  }
} else {
  Write-Warning "[WARN] No metrics CSV resolved; will mark as NOOP unless strict mode forbids."
}

# Build summary (write-dominant)
$summary = @{
  schemaVersion = "6.2"
  generatedAt = (Get-Date).ToString("s")
  params = @{
    startFull = $Start; startSingle = $Start; end = $End
    workers = $Workers; qps = $Qps
    landingWindowMins = 15
    parquetScope = @("silver\alpha\prices","silver\alpha\chip","raw\finmind\prices","raw\finmind\chip")
    disallowNoopFull = [bool]$DisallowNoopFull
    disallowNoopSingle = [bool]$DisallowNoopSingle
    strictExitCode = [bool]$StrictExitCode
    phaseTimeoutMins = $PhaseTimeoutMins
    calendarCsv = $CalendarCsv
    skipFull = [bool]$SkipFull
    skipSingle = $false
  }
  results = @{
    full   = $null
    single = @{
      phase = "single-stock"; start = $Start; end = $End
      exit = $exit; errors = $errorsCount; rows = $rowsSum; landings = $landings
      statusProfile = ($rowsSum -gt 0 -or $landings -gt 0) ? "WRITE" : "EMPTY"
      pass = ($exit -eq 0 -and ($StrictExitCode ? ($errorsCount -eq 0 -and (-not $DisallowNoopSingle -or $rowsSum -gt 0 -or $landings -gt 0)) : $true))
      passReason = ($rowsSum -gt 0 -or $landings -gt 0) ? "write" : "noop"
      csv = $latestCsv?.FullName
      cols = @{ symbols="symbol"; status="status"; errors=$null; calls=$null; rows="rows" }
    }
  }
  error = $null
}

$summary | ConvertTo-Json -Depth 12 | Set-Content $SummaryJsonPath -Encoding utf8
Write-Host "[INFO] Summary JSON refreshed: $SummaryJsonPath"

# Promotion + calendar
try {
  $js = Get-Content $SummaryJsonPath -Raw | ConvertFrom-Json
  $node = $js.results.single
  $status = if (($node.rows -gt 0) -or ($node.landings -gt 0)) { 'PASS' } else { 'PASS_NOOP' }
  $reason = if ($status -eq 'PASS') { 'write' } else { 'noop' }
  $noop   = ($status -ne 'PASS')
  if ($StrictExitCode -and ($node.errors -gt 0)) { $status='FAIL'; if (-not $reason) { $reason='api_error' } $global:LASTEXITCODE = 1 }
  if ($CalendarCsv -and $status -ne 'PASS') {
    try {
      $dates = Import-Csv $CalendarCsv; $set=@{}; $dates | % { $set[$_.date.Trim()]=$true }
      $endDate = $js.params.end
      if ($endDate -and -not $set.ContainsKey($endDate)) { $reason = 'end_is_non_trading_day'; $status = 'PASS_NOOP'; $noop = $true }
    } catch { Write-Warning "[WARN] Calendar check failed: $($_.Exception.Message)" }
  }
  $js | Add-Member -NotePropertyName status  -NotePropertyValue $status  -Force
  $js | Add-Member -NotePropertyName reason  -NotePropertyValue $reason  -Force
  $js | Add-Member -NotePropertyName rows    -NotePropertyValue $node.rows -Force
  $js | Add-Member -NotePropertyName landing -NotePropertyValue $node.landings -Force
  $js | Add-Member -NotePropertyName noop    -NotePropertyValue $noop -Force
  if ($StrictExitCode -and $DisallowNoopSingle -and $noop) {
    $js.status = 'FAIL'; $js.reason = 'noop_disallowed'; $global:LASTEXITCODE = 1
  }
  $js | ConvertTo-Json -Depth 12 | Set-Content $SummaryJsonPath -Encoding utf8
  Write-Host "[INFO] Promoted summary fields to top-level."
} catch { Write-Warning "[WARN] Promote failed: $($_.Exception.Message)" }

try { (Get-Content $SummaryJsonPath -Raw | ConvertFrom-Json) | Select-Object status, reason, rows, landing, noop | Format-List } catch {}
