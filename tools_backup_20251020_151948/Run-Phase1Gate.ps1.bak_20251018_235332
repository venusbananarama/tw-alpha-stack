# tools/Run-Phase1Gate.ps1
[CmdletBinding()]
param(
  [ValidateSet('Advisory','Enforce')]
  [string]$Mode = 'Advisory',
  [string]$Root = ".",
  [switch]$Fix,
  [string[]]$Exclude = @('.venv','reports','datahub','_archive','venv','env'),
  [string]$WaiversFile = '.gate_waivers.txt'
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function In-Exclude([string]$path){
  foreach($e in $Exclude){ if($path -match [regex]::Escape($e)) { return $true } }
  return $false
}

Set-Location $Root
if(-not (Test-Path ".\reports")){ New-Item -ItemType Directory -Force -Path ".\reports" | Out-Null }

# 與手冊一致（AlphaCity KILLSWITCH）
$env:ALPHACITY_ALLOW = '1'
Remove-Item Env:PYTHONSTARTUP -ErrorAction SilentlyContinue
$PY = Join-Path $PWD ".\.venv\Scripts\python.exe"

# 1) Preflight（schema/as-of/freshness）
$pfPath = ".\reports\preflight_report.json"
$pf = $null
if ((Test-Path $PY -PathType Leaf -ErrorAction SilentlyContinue) -and (Test-Path ".\scripts\preflight_check.py")) {
  try {
    & $PY .\scripts\preflight_check.py --rules .\rules.yaml --export .\reports --root . | Out-Null
    if (Test-Path $pfPath) { $pf = Get-Content $pfPath -Raw | ConvertFrom-Json }
  } catch { Write-Warning "Preflight run failed: $($_.Exception.Message)（Advisory 繼續）" }
} else {
  Write-Warning "找不到 venv 或 scripts\preflight_check.py；Preflight 略過（Advisory）"
}

# 2) PowerShell 靜態檢查（Advisory）
$psIssues = @()
$psFiles = Get-ChildItem -Recurse -Include *.ps1,*.psm1 -ErrorAction SilentlyContinue | Where-Object { -not (In-Exclude $_.FullName) }
if ($psFiles) {
  try {
    Import-Module PSScriptAnalyzer -ErrorAction Stop
    $psIssues = Invoke-ScriptAnalyzer -Path $psFiles.FullName -Settings .\PSScriptAnalyzerSettings.psd1 -ErrorAction SilentlyContinue
    if ($Fix) { try { Invoke-Formatter -Path $psFiles.FullName -Settings .\PSScriptAnalyzerSettings.psd1 -ErrorAction SilentlyContinue } catch {} }
  } catch {
    Write-Warning "PSScriptAnalyzer 不可用，跳過（Advisory）"
  }
}

# 3) Python 風格檢查（Advisory；不會改檔除非 -Fix）
$ruffFindings = @(); $blackWouldChange = $false
$pyFiles = Get-ChildItem -Recurse -Include *.py -ErrorAction SilentlyContinue | Where-Object { -not (In-Exclude $_.FullName) }
if ($pyFiles) {
  $ruff  = Join-Path $PWD ".\.venv\Scripts\ruff.exe"
  $black = Join-Path $PWD ".\.venv\Scripts\black.exe"
  if (Test-Path $ruff) {
    $out = & $ruff check . --output-format json 2>$null
    if ($out) { try { $ruffFindings = $out | ConvertFrom-Json } catch {} }
  } else { Write-Warning "ruff 不存在，略過（Advisory）" }
  if (Test-Path $black) {
    & $black --check . 1>$null 2>$null
    if ($LASTEXITCODE -ne 0) { $blackWouldChange = $true }
    if ($Fix) { & $black . | Out-Null }
  } else { Write-Warning "black 不存在，略過（Advisory）" }
}

# 4) CLI 一致性建議（-Config/--config），可用 waivers 豁免舊檔
$cliViolations = @()
$waived = if (Test-Path $WaiversFile) { Get-Content $WaiversFile | Where-Object { $_ -and (-not $_.StartsWith('#')) } } else { @() }
$cliFiles = @()
if (Test-Path ".\scripts") { $cliFiles = Get-ChildItem .\scripts -Recurse -Include *.ps1,*.py -ErrorAction SilentlyContinue | Where-Object { -not (In-Exclude $_.FullName) } }
foreach($f in $cliFiles){
  if ($waived -contains $f.FullName -or $waived -contains $f.FullName.Replace("$PWD\","")) { continue }
  $txt = ""; try { $txt = Get-Content $f.FullName -Raw -ErrorAction Stop } catch { continue }
  $needsConfig = ($txt -match 'Param\(') -or ($txt -match 'argparse')
  if ($needsConfig -and ($txt -notmatch '-Config' -and $txt -notmatch '--config')) {
    $cliViolations += "[Suggest-Add-Config] $($f.FullName)"
  }
}

# 5) 證據鏈存在性
$reportsOk = Test-Path $pfPath

# 6) 彙總輸出
$result = [ordered]@{
  mode = $Mode
  ts = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
  preflight = @{
    ran = ($pf -ne $null)
    ok = ($pf -ne $null) -and ($pf.schema_failures.Count -eq 0) -and ($pf.lag_violations.Count -eq 0)
    freshness = if($pf){ $pf.freshness } else { $null }
  }
  style = @{
    ps_issues = @($psIssues).Count
    ruff_issues = @($ruffFindings).Count
    black_would_change = $blackWouldChange
  }
  cli = @{ violations = $cliViolations }
  artifacts = @{ preflight_json_present = $reportsOk }
}
$result | ConvertTo-Json -Depth 8 | Set-Content .\reports\phase1_consistency_summary.json -Encoding UTF8

# 7) 結束條件
if ($Mode -eq 'Enforce') {
  $hardFail = -not $result.preflight.ok -or -not $reportsOk
  if ($hardFail) { Write-Error "Phase1Gate: FAIL（硬性條件未通過）" } else { Write-Host "Phase1Gate: PASS（硬性條件）" }
} else {
  Write-Host "Phase1Gate: ADVISORY（僅輸出報告，不阻斷）"
}

